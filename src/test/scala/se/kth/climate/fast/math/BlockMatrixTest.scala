package se.kth.climate.fast.math

import org.scalatest._
import breeze.linalg.{ Matrix => BM, DenseMatrix => BDM }
import java.text.DecimalFormat
import com.holdenkarau.spark.testing.SharedSparkContext


class BlockMatrixTest extends FunSuite with Matchers with SharedSparkContext {

    val mat9 = Array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);

    private def blocksForDM(dm: DenseMatrix) = List(
        ((0 -> 0) -> dm),
        ((0 -> 1) -> dm.scalarAdd(1 * 9)),
        ((0 -> 2) -> dm.scalarAdd(2 * 9)),
        ((1 -> 0) -> dm.scalarAdd(3 * 9)),
        ((1 -> 1) -> dm.scalarAdd(4 * 9)),
        ((1 -> 2) -> dm.scalarAdd(5 * 9)),
        ((2 -> 0) -> dm.scalarAdd(6 * 9)),
        ((2 -> 1) -> dm.scalarAdd(7 * 9)),
        ((2 -> 2) -> dm.scalarAdd(8 * 9))
    );

    test("Grid should be laid out properly") {
        val dm = new DenseMatrix(3, 3, mat9);
        val blocks = blocksForDM(dm);
        val bm = new BlockMatrix(sc.parallelize(blocks), 3, 3, 9, 9);
        val bmM = toMathematica(bm);
        println("bm: " + bmM);
        bmM shouldBe "{{1.0,4.0,7.0,10.0,13.0,16.0,19.0,22.0,25.0},{2.0,5.0,8.0,11.0,14.0,17.0,20.0,23.0,26.0},{3.0,6.0,9.0,12.0,15.0,18.0,21.0,24.0,27.0},{28.0,31.0,34.0,37.0,40.0,43.0,46.0,49.0,52.0},{29.0,32.0,35.0,38.0,41.0,44.0,47.0,50.0,53.0},{30.0,33.0,36.0,39.0,42.0,45.0,48.0,51.0,54.0},{55.0,58.0,61.0,64.0,67.0,70.0,73.0,76.0,79.0},{56.0,59.0,62.0,65.0,68.0,71.0,74.0,77.0,80.0},{57.0,60.0,63.0,66.0,69.0,72.0,75.0,78.0,81.0}}";
        val dm3 = new DenseMatrix(bm.toBreeze());
        val dm3M = toMathematica(dm3);
        println("dm3:" + dm3M);
        dm3M shouldBe "{{1.0,4.0,7.0,10.0,13.0,16.0,19.0,22.0,25.0},{2.0,5.0,8.0,11.0,14.0,17.0,20.0,23.0,26.0},{3.0,6.0,9.0,12.0,15.0,18.0,21.0,24.0,27.0},{28.0,31.0,34.0,37.0,40.0,43.0,46.0,49.0,52.0},{29.0,32.0,35.0,38.0,41.0,44.0,47.0,50.0,53.0},{30.0,33.0,36.0,39.0,42.0,45.0,48.0,51.0,54.0},{55.0,58.0,61.0,64.0,67.0,70.0,73.0,76.0,79.0},{56.0,59.0,62.0,65.0,68.0,71.0,74.0,77.0,80.0},{57.0,60.0,63.0,66.0,69.0,72.0,75.0,78.0,81.0}}";
        val bm2 = dm3.toBlockMatrix(3, 3)(sc);
        val bm2M = toMathematica(bm2);
        println("bm2: " + bm2M);
        bm2M shouldBe "{{1.0,4.0,7.0,10.0,13.0,16.0,19.0,22.0,25.0},{2.0,5.0,8.0,11.0,14.0,17.0,20.0,23.0,26.0},{3.0,6.0,9.0,12.0,15.0,18.0,21.0,24.0,27.0},{28.0,31.0,34.0,37.0,40.0,43.0,46.0,49.0,52.0},{29.0,32.0,35.0,38.0,41.0,44.0,47.0,50.0,53.0},{30.0,33.0,36.0,39.0,42.0,45.0,48.0,51.0,54.0},{55.0,58.0,61.0,64.0,67.0,70.0,73.0,76.0,79.0},{56.0,59.0,62.0,65.0,68.0,71.0,74.0,77.0,80.0},{57.0,60.0,63.0,66.0,69.0,72.0,75.0,78.0,81.0}}";
    }

    test("Matrix Operations") {
        val dm = new DenseMatrix(3, 3, mat9);
        val blocks = blocksForDM(dm);
        val bm = new BlockMatrix(sc.parallelize(blocks), 3, 3, 9, 9);
        println("bm: " + toMathematica(bm));
        val bmT = bm.transpose();
        val bmTM = toMathematica(bmT);
        bmTM shouldBe "{{1.0,2.0,3.0,28.0,29.0,30.0,55.0,56.0,57.0},{4.0,5.0,6.0,31.0,32.0,33.0,58.0,59.0,60.0},{7.0,8.0,9.0,34.0,35.0,36.0,61.0,62.0,63.0},{10.0,11.0,12.0,37.0,38.0,39.0,64.0,65.0,66.0},{13.0,14.0,15.0,40.0,41.0,42.0,67.0,68.0,69.0},{16.0,17.0,18.0,43.0,44.0,45.0,70.0,71.0,72.0},{19.0,20.0,21.0,46.0,47.0,48.0,73.0,74.0,75.0},{22.0,23.0,24.0,49.0,50.0,51.0,76.0,77.0,78.0},{25.0,26.0,27.0,52.0,53.0,54.0,79.0,80.0,81.0}}";
        println("bmT: " + bmTM);
        val bmPlusbmT = bm.add(bmT);
        val bmPlusbmTM = toMathematica(bmPlusbmT);
        bmPlusbmTM shouldBe "{{2.0,6.0,10.0,38.0,42.0,46.0,74.0,78.0,82.0},{6.0,10.0,14.0,42.0,46.0,50.0,78.0,82.0,86.0},{10.0,14.0,18.0,46.0,50.0,54.0,82.0,86.0,90.0},{38.0,42.0,46.0,74.0,78.0,82.0,110.0,114.0,118.0},{42.0,46.0,50.0,78.0,82.0,86.0,114.0,118.0,122.0},{46.0,50.0,54.0,82.0,86.0,90.0,118.0,122.0,126.0},{74.0,78.0,82.0,110.0,114.0,118.0,146.0,150.0,154.0},{78.0,82.0,86.0,114.0,118.0,122.0,150.0,154.0,158.0},{82.0,86.0,90.0,118.0,122.0,126.0,154.0,158.0,162.0}}";
        println("bm+bmT: " + bmPlusbmTM);
        val bmMinusbmT = bm.subtract(bmT);
        val bmMinusbmTM = toMathematica(bmMinusbmT);
        bmMinusbmTM shouldBe "{{0.0,2.0,4.0,-18.0,-16.0,-14.0,-36.0,-34.0,-32.0},{-2.0,0.0,2.0,-20.0,-18.0,-16.0,-38.0,-36.0,-34.0},{-4.0,-2.0,0.0,-22.0,-20.0,-18.0,-40.0,-38.0,-36.0},{18.0,20.0,22.0,0.0,2.0,4.0,-18.0,-16.0,-14.0},{16.0,18.0,20.0,-2.0,0.0,2.0,-20.0,-18.0,-16.0},{14.0,16.0,18.0,-4.0,-2.0,0.0,-22.0,-20.0,-18.0},{36.0,38.0,40.0,18.0,20.0,22.0,0.0,2.0,4.0},{34.0,36.0,38.0,16.0,18.0,20.0,-2.0,0.0,2.0},{32.0,34.0,36.0,14.0,16.0,18.0,-4.0,-2.0,0.0}}";
        println("bm-bmT: " + bmMinusbmTM);
        val bmDotbmT = bm.multiply(bmT);
        println(bmDotbmT.toBreeze());
        val bmDotbmTM = toMathematica(bmDotbmT);
        bmDotbmTM shouldBe "{{2061.0,2178.0,2295.0,5220.0,5337.0,5454.0,8379.0,8496.0,8613.0},{2178.0,2304.0,2430.0,5580.0,5706.0,5832.0,8982.0,9108.0,9234.0},{2295.0,2430.0,2565.0,5940.0,6075.0,6210.0,9585.0,9720.0,9855.0},{5220.0,5580.0,5940.0,14940.0,15300.0,15660.0,24660.0,25020.0,25380.0},{5337.0,5706.0,6075.0,15300.0,15669.0,16038.0,25263.0,25632.0,26001.0},{5454.0,5832.0,6210.0,15660.0,16038.0,16416.0,25866.0,26244.0,26622.0},{8379.0,8982.0,9585.0,24660.0,25263.0,25866.0,40941.0,41544.0,42147.0},{8496.0,9108.0,9720.0,25020.0,25632.0,26244.0,41544.0,42156.0,42768.0},{8613.0,9234.0,9855.0,25380.0,26001.0,26622.0,42147.0,42768.0,43389.0}}";
        println("bm.bmT: " + bmDotbmTM);
    }

    test("Nonlinear Matrix Operations") {
        val dm = new DenseMatrix(3, 3, mat9);
        val blocks = blocksForDM(dm);
        val bm = new BlockMatrix(sc.parallelize(blocks), 3, 3, 9, 9);
        val bmM = toMathematica(bm);
        println("bm: " + bmM);
        val bmSquared = bm.mapValues(x => x * x);
        val bmSquaredM = toMathematica(bmSquared);
        bmSquaredM shouldBe "{{1.0,16.0,49.0,100.0,169.0,256.0,361.0,484.0,625.0},{4.0,25.0,64.0,121.0,196.0,289.0,400.0,529.0,676.0},{9.0,36.0,81.0,144.0,225.0,324.0,441.0,576.0,729.0},{784.0,961.0,1156.0,1369.0,1600.0,1849.0,2116.0,2401.0,2704.0},{841.0,1024.0,1225.0,1444.0,1681.0,1936.0,2209.0,2500.0,2809.0},{900.0,1089.0,1296.0,1521.0,1764.0,2025.0,2304.0,2601.0,2916.0},{3025.0,3364.0,3721.0,4096.0,4489.0,4900.0,5329.0,5776.0,6241.0},{3136.0,3481.0,3844.0,4225.0,4624.0,5041.0,5476.0,5929.0,6400.0},{3249.0,3600.0,3969.0,4356.0,4761.0,5184.0,5625.0,6084.0,6561.0}}";
        println("bmSquared: " + bmSquaredM)
    }

    ignore("Masked identity") {
        fail
    }

    ignore("Interpolate Up") {
        fail    
    }

    ignore("Interpolate Down") {
        fail   
    }

    private val dFormat = new DecimalFormat("#####################0.0####");
    
    private def toMathematica(m: Matrix): String = {
        val rows: Array[Array[Double]] = Array.ofDim(m.numRows().toInt);
        m.foreachActive((i, j, v) => {
            var row = rows(i);
            if (row == null) {
                row = Array.ofDim(m.numCols().toInt);
                rows(i) = row;
            }
            row(j) = v;
        });
        val sb = new scala.collection.mutable.StringBuilder();
        sb.append('{');
        for (row <- rows) {
            sb.append('{');
            for (col <- row) {
                sb.append(dFormat.format(col));
                sb.append(',');
            }
            sb.deleteCharAt(sb.length - 1); // delete extra ,
            sb.append('}');
            sb.append(',');
        }
        sb.deleteCharAt(sb.length - 1); // delete extra , 
        sb.append('}');
        sb.result()
    }
}